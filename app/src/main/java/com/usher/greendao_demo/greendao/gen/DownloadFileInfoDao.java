package com.usher.greendao_demo.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.aphrodite.obtainstudents.entity.DownloadFileInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DOWNLOAD_FILE_INFO".
*/
public class DownloadFileInfoDao extends AbstractDao<DownloadFileInfo, Long> {

    public static final String TABLENAME = "DOWNLOAD_FILE_INFO";

    /**
     * Properties of entity DownloadFileInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property FileName = new Property(1, String.class, "fileName", false, "file_name");
        public final static Property SavePath = new Property(2, String.class, "savePath", false, "save_path");
        public final static Property Url = new Property(3, String.class, "url", false, "url");
        public final static Property TotalLength = new Property(4, long.class, "totalLength", false, "total_length");
        public final static Property ReadLength = new Property(5, long.class, "readLength", false, "read_length");
    }


    public DownloadFileInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DownloadFileInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DOWNLOAD_FILE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"file_name\" TEXT," + // 1: fileName
                "\"save_path\" TEXT," + // 2: savePath
                "\"url\" TEXT," + // 3: url
                "\"total_length\" INTEGER NOT NULL ," + // 4: totalLength
                "\"read_length\" INTEGER NOT NULL );"); // 5: readLength
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DOWNLOAD_FILE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DownloadFileInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(3, savePath);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
        stmt.bindLong(5, entity.getTotalLength());
        stmt.bindLong(6, entity.getReadLength());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DownloadFileInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(2, fileName);
        }
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(3, savePath);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
        stmt.bindLong(5, entity.getTotalLength());
        stmt.bindLong(6, entity.getReadLength());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DownloadFileInfo readEntity(Cursor cursor, int offset) {
        DownloadFileInfo entity = new DownloadFileInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fileName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // savePath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.getLong(offset + 4), // totalLength
            cursor.getLong(offset + 5) // readLength
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DownloadFileInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setFileName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSavePath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTotalLength(cursor.getLong(offset + 4));
        entity.setReadLength(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DownloadFileInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DownloadFileInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DownloadFileInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
